diff --git a/proyecto_pokemones/src/gui/BattleGUI.java b/proyecto_pokemones/src/gui/BattleGUI.java
index d3650c2..b655d8e 100644
--- a/proyecto_pokemones/src/gui/BattleGUI.java
+++ b/proyecto_pokemones/src/gui/BattleGUI.java
@@ -1,7 +1,6 @@
 package gui;
 
 import models.entrenadores.Entrenador;
-import models.pokemones.Pokemon;
 import models.ataques.Ataque;
 import models.pokemones.*;
 
@@ -14,25 +13,35 @@ import java.util.Random;
 public class BattleGUI extends JFrame {
     private JTextField entrenador1Field;
     private JTextField entrenador2Field;
+    private int turnoActual= 0;
+    private int pokemonTurnoIndex= 0;
+    private JButton [] attackButtons;
     private JButton iniciarButton;
     private JTextArea logArea;
     private JPanel ataquePanel;
+    private Pokemon atacante;
+    private Pokemon defensor;
 
     private Entrenador entrenador1;
     private Entrenador entrenador2;
+    
     private Pokemon[] disponibles;
 
     public BattleGUI() {
         try {
             setTitle("Batalla Pokémon");
-            setSize(600, 500);
+            setSize(800, 500);
             setDefaultCloseOperation(EXIT_ON_CLOSE);
             setLocationRelativeTo(null);
 
             System.out.println("Inicializando la interfaz gráfica...");
 
             initUI();
+        
+
             inicializarPokemonesDisponibles();
+            
+            setVisible(true);//para las ventanas Swing 
 
             System.out.println("BattleGUI se ha inicializado correctamente.");
         } catch (Exception e) {
@@ -41,21 +50,36 @@ public class BattleGUI extends JFrame {
         }
     }
 
+
+
     private void initUI() {
         setLayout(new BorderLayout());
 
         // Panel superior para ingresar nombres
-        JPanel topPanel = new JPanel();
-        topPanel.add(new JLabel("Entrenador 1:"));
-        entrenador1Field = new JTextField(10);
-        topPanel.add(entrenador1Field);
+        JPanel topPanel = new JPanel(new FlowLayout());//
 
-        topPanel.add(new JLabel("Entrenador 2:"));
+        entrenador1Field = new JTextField(10);
         entrenador2Field = new JTextField(10);
-        topPanel.add(entrenador2Field);
-
         iniciarButton = new JButton("Iniciar Batalla");
+        iniciarButton.setBackground(Color.GREEN);//color boton para iniciar batalla
+
+
+
+
+
+
+        topPanel.add(new JLabel("Entrenador 1:"));
+        topPanel.add(entrenador1Field);
+        topPanel.add(new JLabel("Entrenador 2:")); 
+        topPanel.add(entrenador2Field);
         topPanel.add(iniciarButton);
+        topPanel.setBackground(Color.YELLOW);//color panel entrenadores 
+        topPanel.setBorder(BorderFactory.createTitledBorder("Bienvenidos a la Batalla Pokémon"));//titulo
+
+
+
+
+
 
         add(topPanel, BorderLayout.NORTH);
 
@@ -66,10 +90,16 @@ public class BattleGUI extends JFrame {
         add(scroll, BorderLayout.CENTER);
 
         // Panel inferior de ataques
-        ataquePanel = new JPanel();
+        JPanel ataquePanel = new JPanel(new FlowLayout());
+        attackButtons = new JButton[4];
+        for(int i= 0; i<4; i++){
+            attackButtons[i] = new JButton("Ataque " + (i+1));
+            attackButtons[i].setVisible(false);
+            ataquePanel.add(attackButtons[i]);
+        }
         add(ataquePanel, BorderLayout.SOUTH);
 
-        iniciarButton.addActionListener(_ -> iniciarBatalla());
+        iniciarButton.addActionListener(e -> iniciarBatalla());
     }
 
     private void inicializarPokemonesDisponibles() {
@@ -116,15 +146,41 @@ public class BattleGUI extends JFrame {
             logArea.setText("");
             log("¡Comienza la batalla Pokémon entre " + nombre1 + " y " + nombre2 + "!\n");
 
+            turnoActual= 0;
+            pokemonTurnoIndex= 0;
+            mostrarEstadoActual();
+
+
             mostrarOpcionesDeAtaque();
         } catch (Exception e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error al iniciar la batalla: " + e.getMessage());
         }
+
     }
 
+    private void mostrarEstadoActual(){
+        atacante = turnoActual % 2 == 0
+                ? entrenador1.getEquipo().get(pokemonTurnoIndex)
+                : entrenador2.getEquipo().get(pokemonTurnoIndex);
+
+        defensor = turnoActual % 2 == 0
+                ? entrenador2.getEquipo().get(pokemonTurnoIndex)
+                : entrenador1.getEquipo().get(pokemonTurnoIndex);
+    
+        log("\n---------------- Estado actual -----------------\n");
+
+        log(entrenador1.getNombre() + ": " + entrenador1.getEquipo().get(pokemonTurnoIndex));
+        log("\n" + entrenador2.getNombre() + ": " + entrenador2.getEquipo().get(pokemonTurnoIndex));
+        log("\nTurno de " + (turnoActual % 2 == 0 ? entrenador1.getNombre() : entrenador2.getNombre()) + "\n");
+
+
+    }
     private void mostrarOpcionesDeAtaque() {
-        try {
+
+        // lo comentado es la implementacion anterior pero que no concordaba con la logica definida
+        //borrarlo cuando sea necesario
+        /* try {
             ataquePanel.removeAll();
             ataquePanel.setLayout(new FlowLayout());
 
@@ -169,7 +225,78 @@ public class BattleGUI extends JFrame {
         } catch (Exception e) {
             e.printStackTrace();
             JOptionPane.showMessageDialog(this, "Error al mostrar las opciones de ataque: " + e.getMessage());
+        }*/
+        List<Ataque> ataques = atacante.getAtaques();
+        for (int i = 0; i < attackButtons.length; i++) {
+            attackButtons[i].removeActionListener(attackButtons[i].getActionListeners().length > 0 ? attackButtons[i].getActionListeners()[0] : null);
+            if (i < ataques.size()) {
+                Ataque atk = ataques.get(i);
+                attackButtons[i].setText(atk.getNombre());
+                attackButtons[i].setVisible(true);
+                attackButtons[i].addActionListener(e -> ejecutarAtaque(atk));
+            } else {
+                attackButtons[i].setVisible(false);
+            }
+        }  
+
+       
+    }
+
+
+    private void ejecutarAtaque(Ataque ataque) {
+
+        String resultado = atacante.atacarConAtaque(defensor, ataque);
+    log(resultado);  // <--- esto muestra el mensaje en la interfaz
+
+    if (defensor.getPuntos_de_salud() <= 0) {
+        log(defensor.getNombre() + " ha sido derrotado.\n");
+        if (turnoActual % 2 == 0) {
+            entrenador2.getEquipo().remove(pokemonTurnoIndex);
+        } else {
+            entrenador1.getEquipo().remove(pokemonTurnoIndex);
+        }
+    }
+
+    if (entrenador1.equipoDerrotado() || entrenador2.equipoDerrotado()) {
+        String ganador = entrenador1.equipoDerrotado() ? entrenador2.getNombre() : entrenador1.getNombre();
+        log("\n¡La batalla ha terminado! Ganador: " + ganador);
+
+        int opcion = JOptionPane.showOptionDialog(
+            this,
+            "Ganador: " + ganador + "\n¿Deseas jugar otra vez?",
+            "Fin de la batalla",
+            JOptionPane.YES_NO_OPTION,
+            JOptionPane.INFORMATION_MESSAGE,
+            null,
+            new Object[]{"Reiniciar", "Salir"},
+            "Reiniciar"
+        );
+
+        if (opcion == JOptionPane.YES_OPTION) {
+            reiniciarBatalla();
+        } else {
+            System.exit(0);
+        }
+
+        return;
+    }
+        turnoActual++;
+        mostrarEstadoActual();
+        mostrarOpcionesDeAtaque();
+    }
+
+
+    private void reiniciarBatalla() {
+        entrenador1.getEquipo().clear();
+        entrenador2.getEquipo().clear();
+        turnoActual = 0;
+        pokemonTurnoIndex = 0;
+        logArea.setText("");
+        for (JButton btn : attackButtons) {
+            btn.setVisible(false);
         }
+        entrenador1Field.setText("");
+        entrenador2Field.setText("");
     }
 
     private void seleccionarEquipoAleatorio(Entrenador entrenador) {
diff --git a/proyecto_pokemones/src/models/ataques/Ataque.java b/proyecto_pokemones/src/models/ataques/Ataque.java
index 82a2f46..7a5eec8 100644
--- a/proyecto_pokemones/src/models/ataques/Ataque.java
+++ b/proyecto_pokemones/src/models/ataques/Ataque.java
@@ -30,8 +30,9 @@ public class Ataque {
         return tipoAtaque;
     }
 
-    public void aplicarAtaque(Pokemon objetivo) {
-        System.out.println(objetivo.getNombre() + " recibe " + dano + " de daño por " + nombre);
+    public void aplicarAtaque(Pokemon atacante,Pokemon objetivo) {
+        int danio = atacante.calcularDanio(this, objetivo);
+        System.out.println(atacante.getNombre() + " usa " + nombre + " contra " + objetivo.getNombre() + ",/n causando " + danio + " de daño.");
         objetivo.recibirDanio(dano);
     }
 }
diff --git a/proyecto_pokemones/src/models/pokemones/Pokemon.java b/proyecto_pokemones/src/models/pokemones/Pokemon.java
index 9bef908..274d1b3 100644
--- a/proyecto_pokemones/src/models/pokemones/Pokemon.java
+++ b/proyecto_pokemones/src/models/pokemones/Pokemon.java
@@ -34,6 +34,11 @@ public abstract class Pokemon {
             this.defensaEspecial = defensaEspecial;
             this.velocidad = velocidad;
     }
+    public String toString(){
+        return nombre + "(HP: " + puntos_de_salud + ", Tipo: " + tipo + ", Ataque: " + ataque + ", Defensa: " + defensa +
+                ", Ataque Especial: " + ataqueEspecial + ", Defensa Especial: " + defensaEspecial +
+                ", Velocidad: " + velocidad + ")";
+    }
 
     public String getNombre() {
         return nombre;
@@ -103,19 +108,29 @@ public abstract class Pokemon {
         this.velocidad = velocidad;
     }
 
+    public String atacarConAtaque(Pokemon objetivo, Ataque ataque) {
+        int danio = calcularDanio(ataque, objetivo);
+        objetivo.recibirDanio(danio);
+        return this.getNombre() + " usa " + ataque.getNombre() + " contra " + objetivo.getNombre() + " y causa " + danio + " de daño.\n";
+    }
+
     public void atacar(Pokemon enemigo, int indice) {
         if (indice < 0 || indice >= ataques.size()) {
             System.out.println("Índice de ataque inválido.");
             return;
         }
         Ataque ataqueSeleccionado = ataques.get(indice);
-        int danioFinal = calcularDanio(ataqueSeleccionado, enemigo);
+        ataqueSeleccionado.aplicarAtaque(this, enemigo); // Llama al método aplicarAtaque de la clase Ataque
+       /*  int danioFinal = calcularDanio(ataqueSeleccionado, enemigo);
         
         System.out.println(nombre + " ataca a " + enemigo.getNombre() + " con " + ataqueSeleccionado.getNombre() +
             ", causando " + danioFinal + " puntos de daño.");
             
             enemigo.recibirDanio(danioFinal);
+            */
+        
         }
+       
 
     // Ventajas de tipo
     public static boolean tieneVentaja(TipoPokemon atacante, TipoPokemon defensor) {
